// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CryptoRatesConverterApp.CoinMarketCapSync.BDD.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CryptoRatesServiceFeature : object, Xunit.IClassFixture<CryptoRatesServiceFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public CryptoRatesServiceFeature(CryptoRatesServiceFeature.FixtureData fixtureData, CryptoRatesConverterApp_CoinMarketCapSync_BDD_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CryptoRatesService", "    As a crypto rates service\n    I want to fetch cryptocurrency prices and excha" +
                    "nge rates\n    So that I can provide accurate currency conversions", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully fetch crypto price in EUR")]
        [Xunit.TraitAttribute("FeatureTitle", "CryptoRatesService")]
        [Xunit.TraitAttribute("Description", "Successfully fetch crypto price in EUR")]
        public void SuccessfullyFetchCryptoPriceInEUR()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully fetch crypto price in EUR", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                testRunner.Given("the CoinMarketCap API will return a successful response for BTC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                testRunner.When("I request the crypto price in EUR for BTC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("the price should be 50000.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle missing crypto data")]
        [Xunit.TraitAttribute("FeatureTitle", "CryptoRatesService")]
        [Xunit.TraitAttribute("Description", "Handle missing crypto data")]
        public void HandleMissingCryptoData()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle missing crypto data", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                testRunner.Given("the CoinMarketCap API will return a not found response for UNKNOWN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                testRunner.When("I request the crypto price in EUR for UNKNOWN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("an exception should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully fetch exchange rates")]
        [Xunit.TraitAttribute("FeatureTitle", "CryptoRatesService")]
        [Xunit.TraitAttribute("Description", "Successfully fetch exchange rates")]
        public void SuccessfullyFetchExchangeRates()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully fetch exchange rates", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                testRunner.Given("the exchange rates API will return a successful response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                testRunner.When("I request the exchange rates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("the exchange rates should contain correct values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle exchange rates API error")]
        [Xunit.TraitAttribute("FeatureTitle", "CryptoRatesService")]
        [Xunit.TraitAttribute("Description", "Handle exchange rates API error")]
        public void HandleExchangeRatesAPIError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle exchange rates API error", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                testRunner.Given("the exchange rates API will return an error response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                testRunner.When("I request the exchange rates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("an exception should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle malformed CoinMarketCap API response")]
        [Xunit.TraitAttribute("FeatureTitle", "CryptoRatesService")]
        [Xunit.TraitAttribute("Description", "Handle malformed CoinMarketCap API response")]
        public void HandleMalformedCoinMarketCapAPIResponse()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle malformed CoinMarketCap API response", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                testRunner.Given("the CoinMarketCap API will return a malformed response for BTC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                testRunner.When("I request the crypto price in EUR for BTC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("an exception should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle CoinMarketCap API server error")]
        [Xunit.TraitAttribute("FeatureTitle", "CryptoRatesService")]
        [Xunit.TraitAttribute("Description", "Handle CoinMarketCap API server error")]
        public void HandleCoinMarketCapAPIServerError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle CoinMarketCap API server error", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                testRunner.Given("the CoinMarketCap API will return a server error for BTC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                testRunner.When("I request the crypto price in EUR for BTC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("an exception should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle CoinMarketCap API rate limit exceeded")]
        [Xunit.TraitAttribute("FeatureTitle", "CryptoRatesService")]
        [Xunit.TraitAttribute("Description", "Handle CoinMarketCap API rate limit exceeded")]
        public void HandleCoinMarketCapAPIRateLimitExceeded()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle CoinMarketCap API rate limit exceeded", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                testRunner.Given("the CoinMarketCap API will return a rate limit exceeded response for BTC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                testRunner.When("I request the crypto price in EUR for BTC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("an exception should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle exchange rates API invalid API key")]
        [Xunit.TraitAttribute("FeatureTitle", "CryptoRatesService")]
        [Xunit.TraitAttribute("Description", "Handle exchange rates API invalid API key")]
        public void HandleExchangeRatesAPIInvalidAPIKey()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle exchange rates API invalid API key", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                testRunner.Given("the exchange rates API will return an invalid API key response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                testRunner.When("I request the exchange rates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("an exception should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle exchange rates API missing currency")]
        [Xunit.TraitAttribute("FeatureTitle", "CryptoRatesService")]
        [Xunit.TraitAttribute("Description", "Handle exchange rates API missing currency")]
        public void HandleExchangeRatesAPIMissingCurrency()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle exchange rates API missing currency", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                testRunner.Given("the exchange rates API will return a response with missing currency", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                testRunner.When("I request the exchange rates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("the exchange rates should contain partial values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CryptoRatesServiceFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CryptoRatesServiceFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
